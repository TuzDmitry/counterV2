{"version":3,"sources":["Button.module.css","DisplayUser.jsx","Button.jsx","ControlPanelUser.jsx","ComponentUser.jsx","ComponentInstaller.jsx","DisplayConfig.jsx","ControlPanelConfig.jsx","ComponentConfig.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","DisplayUser","render","props","state","maxV","maxValue","minV","minValue","memo","memoryValue","isDisabledSet","classRedForDisplay","isSucsess","isSettigs","isError","className","React","Component","Button","onClick","onClickFunc","disabled","setDisabled","style","buttonClass","name","ControlPanelUser","setDisabledForInc","setDisabledForReset","incCounter","resetToZero","ComponentUser","ComponentInstaller","nameInstaller","type","value","onChange","onChangeFunc","classRed","DisplayConfig","onChangeValueMax","e","parseInt","currentTarget","adjustValueMax","onChangeValueMin","adjustValueMin","classRedForMaxValue","classRedForMinValue","ControlPanelConfig","setSettings","ComponentConfig","App","saveState","localStorage","setItem","JSON","stringify","restoreState","stateAsString","getItem","parse","setState","newNubmer","this","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46d413f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonClass\":\"Button_buttonClass__2Ijwf\"};","import React from 'react';\n\nclass DisplayUser extends React.Component {\n\n    render = () => {\n        // let maxV = this.props.state.maxValue;\n        // let minV = this.props.state.minValue;\n        // let memo = this.props.state.memoryValue;\n        //let isDisabledSet=this.props.state.isDisabledSet;\n\n        ///деструктуризация объекта\n        const {maxValue: maxV, minValue: minV, memoryValue: memo, isDisabledSet} = this.props.state;\n\n\n        let classRedForDisplay = memo === maxV ? \"filter-red\" : \"\";\n        /// isDisabledSet: true-когда кнопка SET недоступна для нажатия\n        let isSucsess = isDisabledSet && (maxV > minV) && (minV >= 0);\n        let isSettigs = !isDisabledSet && (maxV > minV) && (minV >= 0);\n        let isError = (maxV <= minV || minV < 0 || maxV < 0);\n\n        ///is Sucsess. is Error is Settigs\n\n\n        return (\n            <div className={`display`}>\n\n                {isSucsess && <span className={`numb ${classRedForDisplay}`}>{memo}</span>}\n                {/*{!this.props.state.isDisabledSet &&*/}\n                {isSettigs && <span className=\"message\">enter values and press 'set'</span>}\n\n                {isError && <span className=\"filter-red\">incorrect value</span>}\n\n            </div>\n        );\n    }\n}\n\nexport default DisplayUser;","import React from 'react';\nimport style from './Button.module.css'\n\nclass Button extends React.Component {\n\n    render = () => {\n        return (\n            <span>\n                <button\n                    onClick={this.props.onClickFunc}\n                    disabled={this.props.setDisabled}\n                    className={`${style.buttonClass}`}>\n                    {this.props.name}\n                </button>\n            </span>\n        );\n    }\n}\n\nexport default Button;","import React from 'react';\nimport Button from \"./Button\";\n\nclass ControlPanelUser extends React.Component {\n\n    render = () => {\n\n        ///деструктуризация объекта\n        const {maxValue: maxV, minValue: minV, memoryValue: memo, isDisabledSet} = this.props.state;\n\n        let setDisabledForInc = (memo === maxV) || !isDisabledSet || (maxV <= minV || minV < 0 || maxV < 0) ? true : false;\n        let setDisabledForReset = (minV === memo) || !isDisabledSet || (maxV <= minV || minV < 0 || maxV < 0) ? true : false;\n\n        return (\n            <div className=\"controlPanel\">\n                <Button setDisabled={setDisabledForInc} name={'inc'} onClickFunc={this.props.incCounter}/>\n                <Button setDisabled={setDisabledForReset} name={'reset'} onClickFunc={this.props.resetToZero}/>\n            </div>\n        );\n    }\n}\n\nexport default ControlPanelUser;","import React from 'react';\nimport DisplayUser from \"./DisplayUser\";\nimport ControlPanelUser from \"./ControlPanelUser\";\n\n\nclass ComponentUser extends React.Component {\n\n\n    render = () => {\n\n        return (\n            <div className=\"counterBlock\">\n                <div className=\"box\">\n                    <DisplayUser state={this.props.state}/>\n\n                    <ControlPanelUser state={this.props.state} incCounter={this.props.incCounter}\n                                      resetToZero={this.props.resetToZero}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ComponentUser;","import React from 'react';\n\nclass ComponentInstaller extends React.Component {\n\n\n    render = () => {\n\n\n        return (\n            <div className=\"containerValue\">\n                <div>{this.props.nameInstaller}</div>\n                <input type=\"number\"\n                       value={this.props.value}\n                       onChange={this.props.onChangeFunc}\n                       className={this.props.classRed}/>\n            </div>\n        );\n    }\n}\n\nexport default ComponentInstaller;","import React from 'react';\nimport ComponentInstaller from \"./ComponentInstaller\";\n\nclass DisplayConfig extends React.Component {\n\n    onChangeValueMax = (e) => {\n        let value = parseInt(e.currentTarget.value)\n        this.props.adjustValueMax(value)\n        // alert(e.currentTarget)\n        // debugger;\n    }\n    onChangeValueMin = (e) => {\n        let value = parseInt(e.currentTarget.value)\n\n        this.props.adjustValueMin(value)\n        // alert(e.currentTarget)\n        // debugger;\n    }\n\n    render = () => {\n        // let maxV = this.props.state.maxValue;\n        // let minV = this.props.state.minValue;\n        const {maxValue: maxV, minValue: minV} = this.props.state;\n\n        let classRedForMaxValue = (maxV <= minV || maxV < 0) ? \"input-red\" : \"\";\n        let classRedForMinValue = (maxV <= minV || minV < 0) ? \"input-red\" : \"\";\n\n        return (\n            <div className=\"display\">\n\n                <ComponentInstaller nameInstaller={\"max value:\"}\n                                    value={maxV}\n                                    onChangeFunc={this.onChangeValueMax}\n                                    classRed={classRedForMaxValue}/>\n                <ComponentInstaller nameInstaller={\"start value:\"}\n                                    value={minV}\n                                    onChangeFunc={this.onChangeValueMin}\n                                    classRed={classRedForMinValue}/>\n            </div>\n        );\n    }\n}\n\nexport default DisplayConfig;","import React from 'react';\nimport Button from \"./Button\";\n\nclass ControlPanelConfig extends React.Component {\n\n    render = () => {\n\n        let setDisabled = this.props.state.isDisabledSet;\n\n        return (\n            <div className=\"controlPanel\">\n                <Button name={'set'} setDisabled={setDisabled} onClickFunc={this.props.setSettings}/>\n            </div>\n        );\n    }\n}\n\nexport default ControlPanelConfig;","import React from 'react';\nimport DisplayConfig from \"./DisplayConfig\";\nimport ControlPanelConfig from \"./ControlPanelConfig\";\n\n\nclass ComponentConfig extends React.Component {\n\n\n    render = () => {\n\n        return (\n            <div className=\"configBlock\">\n                <div className=\"box\">\n                    <DisplayConfig state={this.props.state} adjustValueMin={this.props.adjustValueMin}\n                                   adjustValueMax={this.props.adjustValueMax}/>\n                    <ControlPanelConfig setSettings={this.props.setSettings} state={this.props.state}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ComponentConfig;","import React from 'react';\nimport './App.css';\nimport ComponentUser from \"./ComponentUser\";\nimport ComponentConfig from \"./ComponentConfig\";\nconst counter_state = \"counter_state\";\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    state = {\n        minValue: 0,\n        maxValue: 5,\n        memoryValue: 0,\n        isDisabledSet: true,\n        // isDisabledSet: true-когда кнопка SET недоступна для нажатия\n    };\n    ///// метод, который будет брать текущий стейт и… сохранять его в localStorage\n    saveState = () => {\n        ////устанавливаем в localStorage под ключом counter_state  наш стейт переделанный в  джейсон строку JSON.stringify(this.state)\n\n        localStorage.setItem(counter_state, JSON.stringify(this.state));\n    }\n\n    restoreState = () => {\n\n        //// считываем сохраненную ранее строку из localStorage\n        let stateAsString = localStorage.getItem(counter_state)\n        ////если таковая есть, то превращаем строку в объект и призваиваем стейту знаение из стораджа.\n        if (stateAsString) {\n            let state = JSON.parse(stateAsString);\n            this.setState(state)\n        }\n////устанавливаем стейт или пустой или востановленный в стейт\n\n    }\n\n    resetToZero = () => {\n        this.setState({memoryValue: this.state.minValue})\n    }\n\n    incCounter = () => {\n        let newNubmer = parseInt(this.state.memoryValue) + 1;\n        if (newNubmer <= this.state.maxValue) {\n            this.setState({memoryValue: newNubmer})\n        }\n    }\n\n    setSettings = () => {\n        this.setState({isDisabledSet: true, memoryValue: this.state.minValue}, this.saveState)\n    }\n\n    adjustValueMax = (value) => {\n        this.setState({maxValue: value, isDisabledSet: false}, this.saveState)\n        if ((value < 0) || (value <= this.state.minValue)) {\n            this.setState({isDisabledSet: true}, this.saveState)\n        }\n    }\n    adjustValueMin = (value) => {\n        this.setState({minValue: value, isDisabledSet: false}, this.saveState)\n        if ((value < 0) || (value >= this.state.maxValue)) {\n            this.setState({isDisabledSet: true}, this.saveState)\n        }\n    }\n\n\n    render = () => {\n        return (\n            <div className=\"container\">\n                <ComponentConfig state={this.state}\n                                 adjustValueMin={this.adjustValueMin}\n                                 adjustValueMax={this.adjustValueMax}\n                                 setSettings={this.setSettings}/>\n\n                <ComponentUser state={this.state}\n                               incCounter={this.incCounter}\n                               resetToZero={this.resetToZero}/>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}